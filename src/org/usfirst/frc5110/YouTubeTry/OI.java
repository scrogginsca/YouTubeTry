// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5110.YouTubeTry;

import org.usfirst.frc5110.YouTubeTry.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick;
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton3;
    public JoystickButton joystickButton4;
    public Joystick joystickControl;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickControl = new Joystick(1);
        
        joystickButton4 = new JoystickButton(joystickControl, 4);
        joystickButton4.whileHeld(new CloseArms());
        joystickButton3 = new JoystickButton(joystickControl, 3);
        joystickButton3.whileHeld(new OpenArms());
        joystickButton2 = new JoystickButton(joystickControl, 2);
        joystickButton2.whileHeld(new LowerElevator());
        joystickButton1 = new JoystickButton(joystickControl, 1);
        joystickButton1.whileHeld(new RaiseElevator());
        joystick = new Joystick(0);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Lower Elevator", new LowerElevator());

        SmartDashboard.putData("Raise Elevator", new RaiseElevator());

        SmartDashboard.putData("Open Arms", new OpenArms());

        SmartDashboard.putData("Close Arms", new CloseArms());

        SmartDashboard.putData("Prepare to Pickup", new PreparetoPickup());

        SmartDashboard.putData("Grab", new Grab());

        SmartDashboard.putData("Place", new Place());

        SmartDashboard.putData("Deliver Tote", new DeliverTote());

        SmartDashboard.putData("Pull", new Pull());

        SmartDashboard.putData("Push", new Push());

        SmartDashboard.putData("Drive Forward", new DriveForward());

        SmartDashboard.putData("Drive Backward", new DriveBackward());

        SmartDashboard.putData("Arcade Drive", new ArcadeDrive());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getJoystickControl() {
        return joystickControl;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

